package com.mysteel.oilchem.crm.ao.impl;

import com.alibaba.dubbo.common.utils.CollectionUtils;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.mysteel.config.common.page.Query;
import com.mysteel.oilchem.crm.ao.${table.entityName}AbstractAO;
import com.mysteel.oilchem.crm.domain.${table.entityName}DTO;
import com.mysteel.oilchem.crm.service.${table.entityName}Service;
import com.mysteel.oilchem.crm.vo.${table.entityName}VO;
import com.mysteel.utils.BeanUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
public class ${table.entityName}AO extends ${table.entityName}AbstractAO {

	@Autowired
	private ${table.entityName}Service ${table.entityNameLow}Service;

	private Logger logger = LoggerFactory.getLogger(${table.entityName}AO.class);
    @Override
    protected void create(${table.entityName}VO ${table.entityNameLow}VO) {
        if (null == ${table.entityNameLow}VO) {
            return;
        }
        ${table.entityName}DTO ${table.entityNameLow}DTO=new ${table.entityName}DTO();
        BeanUtils.copyProperties(${table.entityNameLow}VO,${table.entityNameLow}DTO);
        ${table.entityNameLow}Service.create${table.entityName}(${table.entityNameLow}DTO);
    }
    @Override
    protected void createBatch(List<${table.entityName}VO> ${table.entityNameLow}VOList) {
        if (CollectionUtils.isEmpty(${table.entityNameLow}VOList)) {
            return;
        }
        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = Lists.newArrayList();
        try {
            ${table.entityNameLow}DTOList = BeanUtils.convertList(${table.entityNameLow}VOList, ${table.entityName}DTO.class);
        } catch (Exception e) {
            String msg = String.format("${table.entityName}AO.createBatch对象转换失败：%s", JSONObject.toJSONString(${table.entityNameLow}VOList));
            logger.error(msg, e);
        }
        ${table.entityNameLow}Service.createBatch${table.entityName}(${table.entityNameLow}DTOList);
    }
    @Override
    protected void remove(Long id) {
        if (null == id) {
            return;
        }
        ${table.entityNameLow}Service.remove${table.entityName}(id);
    }
    @Override
    protected void removeBatch(List<Long> idList) {
        if (CollectionUtils.isEmpty(idList)) {
            return;
        }
        Long[] idArray = idList.toArray(new Long[idList.size()]);
        ${table.entityNameLow}Service.deleteBatch${table.entityName}(idArray);
    }
    @Override
    protected void modify(${table.entityName}VO ${table.entityNameLow}VO) {
        if (null == ${table.entityNameLow}VO) {
            return;
        }
        ${table.entityName}DTO ${table.entityNameLow}DTO=new ${table.entityName}DTO();
        BeanUtils.copyProperties(${table.entityNameLow}VO,${table.entityNameLow}DTO);
        ${table.entityNameLow}Service.modify${table.entityName}( ${table.entityNameLow}DTO);
    }
    @Override
    protected List<${table.entityName}VO> query(${table.entityName}VO ${table.entityNameLow}VO){
        if (null == ${table.entityNameLow}VO) {
            return Lists.newArrayList();
        }
        ${table.entityName}DTO ${table.entityNameLow}DTO=new ${table.entityName}DTO();
        BeanUtils.copyProperties(${table.entityNameLow}VO,${table.entityNameLow}DTO);
        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = ${table.entityNameLow}Service.query${table.entityName}List(${table.entityNameLow}DTO);
        List<${table.entityName}VO> ${table.entityNameLow}VOList = Lists.newArrayList();
        try {
            ${table.entityNameLow}VOList = BeanUtils.convertList(${table.entityNameLow}DTOList, ${table.entityName}VO.class);
        } catch (Exception e) {
            String msg = String.format("${table.entityName}AO.query对象转换失败：%s", JSONObject.toJSONString(${table.entityNameLow}VOList));
            logger.error(msg, e);
        }
        return ${table.entityNameLow}VOList;
    }

    @Override
    protected PageInfo<${table.entityName}VO> queryByPage(${table.entityName}VO ${table.entityNameLow}VO, Query query) {
        if (null == ${table.entityNameLow}VO) {
            return new PageInfo<>();
        }
        ${table.entityName}DTO ${table.entityNameLow}DTO=new ${table.entityName}DTO();
        BeanUtils.copyProperties(${table.entityNameLow}VO,${table.entityNameLow}DTO);
        Pagination<${table.entityName}DTO> ${table.entityNameLow}DTOPagination = ${table.entityNameLow}Service.queryPage${table.entityName}(${table.entityNameLow}DTO, query);
        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = ${table.entityNameLow}DTOPagination.getList();
        List<${table.entityName}VO> ${table.entityNameLow}VOList = Lists.newArrayList();
        try {
            ${table.entityNameLow}VOList = BeanUtils.convertList(${table.entityNameLow}DTOList, ${table.entityName}VO.class);
        } catch (Exception e) {
            String msg = String.format("${table.entityName}AO.queryByPage对象转换失败：%s", JSONObject.toJSONString(${table.entityNameLow}VOList));
            logger.error(msg, e);
        }
        PageInfo<${table.entityName}VO> ${table.entityNameLow}VOPageInfo =
                new PageInfo<>(${table.entityNameLow}VOList);
        ${table.entityNameLow}VOPageInfo.setPages(${table.entityNameLow}DTOPagination.getPages());
        ${table.entityNameLow}VOPageInfo.setTotal(${table.entityNameLow}DTOPagination.getTotal());
        return ${table.entityNameLow}VOPageInfo;
    }
}