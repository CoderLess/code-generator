package com.mysteel.oilchem.crm.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.Page;
import ${doName};
import ${dtoName};
import ${daoName};
import com.google.common.collect.Lists;
import com.mysteel.config.common.page.Pagination;
import com.mysteel.config.common.page.Query;
import com.mysteel.config.common.page.QueryHelper;

import com.mysteel.oilchem.crm.service.${table.entityName}Service;
import com.mysteel.utils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
/**
 * @version 1.0
 * @description: ${table.remark}
 * @projectName：v1sp46
 * @see: com.mysteel.oilchem.crm.service.impl
 * @author： ${author}
 * @createTime：${curTime}
 */
@Service("${table.entityNameLow}Service")
public class ${table.entityName}ServiceImpl implements ${table.entityName}Service {

    @Autowired
    private ${table.entityName}Dao ${table.entityNameLow}Dao;

    private static final Logger logger = LoggerFactory.getLogger(${table.entityName}ServiceImpl.class);

    /**
     * @description: 保存${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public long create${table.entityName}(${table.entityName}DTO ${table.entityNameLow}DTO) {
        if (${table.entityNameLow}DTO == null) {
            return 0;
        }
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        return ${table.entityNameLow}Dao.save(${table.entityNameLow}DO);
    }

    /**
     * @description: 保存多个${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public long createBatch${table.entityName}(List<${table.entityName}DTO> ${table.entityNameLow}DTOList) {
        if (CollectionUtils.isEmpty(${table.entityNameLow}DTOList)) {
            return 0;
        }
        List<${table.entityName}DO> ${table.entityNameLow}DOList;
        try {
            ${table.entityNameLow}DOList = BeanUtils.convertList(${table.entityNameLow}DTOList, ${table.entityName}DO.class);
        } catch (Exception e) {
            String msg = String.format("${table.entityName}ServiceImpl.createBatch${table.entityName}对象转换失败：%s", JSONObject.toJSONString(${table.entityNameLow}DTOList));
            logger.error(msg, e);
            return -1;
        }
        return ${table.entityNameLow}Dao.saveBatch(${table.entityNameLow}DOList);
    }

    /**
     * @description: 修改${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public int modify${table.entityName}(${table.entityName}DTO ${table.entityNameLow}DTO) {
        if (${table.entityNameLow}DTO == null) {
            return 0;
        }
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        return ${table.entityNameLow}Dao.update(${table.entityNameLow}DO);
    }

    /**
     * @description: 根据id删除${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public int remove${table.entityName}(Long id) {
        if (null == id) {
            return 0;
        }
        return ${table.entityNameLow}Dao.delete(id);
    }

    /**
     * @description: 根据id删除${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public int deleteBatch${table.entityName}(Long[] idArr) {
        if (null == idArr || idArr.length<1) {
            return 0;
        }
        return ${table.entityNameLow}Dao.deleteBatch(idArr);
    }

    /**
     * @description: 根据Id查询${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public ${table.entityName}DTO query${table.entityName}(Long id) {
        if (null == id) {
            return null;
        }
        ${table.entityName}DO ${table.entityNameLow}DO = ${table.entityNameLow}Dao.queryObject(id);
        if (null == ${table.entityNameLow}DO) {
            return null;
        }
        ${table.entityName}DTO ${table.entityNameLow}DTO=new ${table.entityName}DTO();
        BeanUtils.copyProperties(${table.entityNameLow}DO, ${table.entityNameLow}DTO);
        return ${table.entityNameLow}DTO;
    }

    /**
     * @description: 分页查询${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public Pagination<${table.entityName}DTO> queryPage${table.entityName}(${table.entityName}DTO ${table.entityNameLow}DTO, Query query) {
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        QueryHelper.startPage(query);
        Page<${table.entityName}DO> ${table.entityNameLow}DOList = ${table.entityNameLow}Dao.queryList(${table.entityNameLow}DO);
        Pagination<${table.entityName}DTO> ${table.entityNameLow}DTOPagination = new Pagination<>(${table.entityNameLow}DOList.getPageNum(), ${table.entityNameLow}DOList.getPageSize(),
                    ${table.entityNameLow}DOList.getTotal(),${table.entityNameLow}DOList.getPages());
        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = Lists.newArrayList();
        try {
                ${table.entityNameLow}DTOList = BeanUtils.convertList(${table.entityNameLow}DOList, ${table.entityName}DTO.class);
        } catch (Exception e) {
            String msg =String.format("${table.entityName}ServiceImpl.queryPage${table.entityName}转换失败：%s", JSONObject.toJSONString(${table.entityNameLow}DOList));
            logger.error(msg, e);
        }
        ${table.entityNameLow}DTOPagination.setList(${table.entityNameLow}DTOList);
        return ${table.entityNameLow}DTOPagination;
    }

    /**
     * @description: 查询${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    @Override
    public List<${table.entityName}DTO> query${table.entityName}List(${table.entityName}DTO ${table.entityNameLow}DTO) {
        if (null == ${table.entityNameLow}DTO) {
            return null;
        }
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        List<${table.entityName}DO> ${table.entityNameLow}DOList = ${table.entityNameLow}Dao.query${table.entityName}List(${table.entityNameLow}DO);
        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = Lists.newArrayList();
        try {
            ${table.entityNameLow}DTOList = BeanUtils.convertList(${table.entityNameLow}DOList, ${table.entityName}DTO.class);
        } catch (Exception e) {
            String msg =String.format("${table.entityName}ServiceImpl.query${table.entityName}List转换失败：%s", JSONObject.toJSONString(${table.entityNameLow}DOList));
            logger.error(msg, e);
        }
        return ${table.entityNameLow}DTOList;
    }

}