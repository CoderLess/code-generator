package com.mysteel.oilchem.crm.controller;

import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.mysteel.config.common.ResultInfo;
import com.mysteel.config.common.controller.BaseController;
import com.mysteel.config.common.page.Query;
import com.mysteel.oilchem.crm.vo.${table.entityName}VO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * @version 1.0
 * @description: ${table.remark}
 * @projectName：v1sp46
 * @see: com.mysteel.oilchem.crm.controller
 * @author： ${author}
 * @createTime：${curTime}
 */
@Api(value = "${table.remark}Controller", tags = "${table.remark}操作接口")
@RequestMapping("${table.entityNameLow}")
public abstract class ${table.entityName}AbstractController extends BaseController {
	private Logger logger = LoggerFactory.getLogger(${table.entityName}AbstractController.class);

	@ApiOperation(value = "创建${table.entityName}", notes = "创建${table.entityName}")
	@PostMapping("create")
	public ResultInfo<Object> create${table.entityName}(${table.entityName}VO ${table.entityNameLow}VO,
                                                        HttpServletRequest request) {
        try{
            this.create${table.entityName}(${table.entityNameLow}VO);
            return new ResultInfo<>().success("添加成功");
        }catch(Exception e){
            String msg = String.format("添加${table.entityName}异常：%s", JSONObject.toJSONString(${table.entityNameLow}VO));
            logger.error(msg, e);
            return new ResultInfo<>().error("1","添加失败");
        }
	}
	@ApiOperation(value = "批量创建${table.entityName}", notes = "批量创建${table.entityName}")
	@PostMapping("createBatch")
	public ResultInfo<Object> createBatch${table.entityName}(List<${table.entityName}VO> ${table.entityNameLow}VOList,
                                                             HttpServletRequest request) {
        try{
            this.createBatch${table.entityName}(${table.entityNameLow}VOList);
            return new ResultInfo<>().success("添加成功");
        }catch(Exception e){
            String msg = String.format("批量添加${table.entityName}异常：%s", JSONObject.toJSONString(${table.entityNameLow}VOList));
            logger.error(msg, e);
            return new ResultInfo<>().error("1","添加失败");
        }
	}
	@ApiOperation(value = "删除${table.entityName}", notes = "删除${table.entityName}")
	@PostMapping("delete")
	public ResultInfo<Object> remove${table.entityName}(Long id,HttpServletRequest request) {
        try{
            this.remove${table.entityName}(id);
            return new ResultInfo<>().success("删除成功");
        }catch(Exception e){
            String msg = String.format("删除${table.entityName}异常：%d", id);
            logger.error(msg, e);
            return new ResultInfo<>().error("1","删除失败");
        }
	}
	@ApiOperation(value = "批量删除${table.entityName}", notes = "批量删除${table.entityName}")
	@PostMapping("deleteBatch")
	public ResultInfo<Object> remove${table.entityName}(List<Long> idList,HttpServletRequest request) {
        try{
            this.removeBatch${table.entityName}(idList);
            return new ResultInfo<>().success("删除成功");
        }catch(Exception e){
            String msg = String.format("批量删除${table.entityName}异常：%s", JSONObject.toJSONString(idList));
            logger.error(msg, e);
            return new ResultInfo<>().error("1","删除失败");
        }
	}
	@ApiOperation(value = "修改${table.entityName}", notes = "修改${table.entityName}")
	@PostMapping("modify")
	public ResultInfo<Object> modify${table.entityName}(${table.entityName}VO ${table.entityNameLow}VO,
                                                        HttpServletRequest request) {
        try{
            this.modify${table.entityName}(${table.entityNameLow}VO);
            return new ResultInfo<>().success("修改成功");
        }catch(Exception e){
            String msg = String.format("修改${table.entityName}异常：%s", JSONObject.toJSONString(${table.entityNameLow}VO));
            logger.error(msg, e);
            return new ResultInfo<>().error("1","修改失败");
        }
	}
	@ApiOperation(value = "查询${table.entityName}", notes = "查询${table.entityName}")
	@GetMapping("query")
	public ResultInfo<Object> query${table.entityName}(${table.entityName}VO ${table.entityNameLow}VO,
                                                        HttpServletRequest request){
        try{
            List<${table.entityName}VO> ${table.entityName}VOList = this.query${table.entityName}(${table.entityNameLow}VO);
            return new ResultInfo<>().success(${table.entityName}VOList);
        }catch(Exception e){
            String msg = String.format("查询${table.entityName}异常：%s", JSONObject.toJSONString(${table.entityNameLow}VO));
            logger.error(msg, e);
            return new ResultInfo<>().error("1","查询失败");
        }
	}
	@ApiOperation(value = "查询${table.entityName}", notes = "查询${table.entityName}")
	@GetMapping("queryByPage")
	public ResultInfo<Object> query${table.entityName}ByPage(${table.entityName}VO ${table.entityNameLow}VO,Query query,
                                                        HttpServletRequest request){
        try{
            PageInfo<${table.entityName}VO> ${table.entityName}VOPageInfo= this.query${table.entityName}ByPage(${table.entityNameLow}VO,query);
            return new ResultInfo<>().success(${table.entityName}VOPageInfo);
        }catch(Exception e){
            String msg = String.format("查询${table.entityName}异常：%s", JSONObject.toJSONString(${table.entityNameLow}VO));
            logger.error(msg, e);
            return new ResultInfo<>().error("1","查询失败");
        }
	}


    /**
     * @description: 创建${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    protected abstract void create${table.entityName}(${table.entityName}VO ${table.entityNameLow}VO);
    /**
     * @description: 批量创建${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    protected abstract void createBatch${table.entityName}(List<${table.entityName}VO> ${table.entityNameLow}VOList);
    /**
     * @description: 根据ID删除${table.entityName}
     * @author：RenBin
     * @createTime：2020/7/22 16:33
     */
    protected abstract void remove${table.entityName}(Long id);
    /**
     * @description: 根据ID批量删除${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    protected abstract void removeBatch${table.entityName}(List<Long> id);
    /**
     * @description: 修改${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    protected abstract void modify${table.entityName}(${table.entityName}VO ${table.entityNameLow}VO);
    /**
     * @description: 查询${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    protected abstract List<${table.entityName}VO> query${table.entityName}(${table.entityName}VO ${table.entityNameLow}VO);
    /**
     * @description: 分页查询${table.entityName}
     * @author：${author}
     * @createTime：${curTime}
     */
    protected abstract PageInfo<${table.entityName}VO> query${table.entityName}ByPage(${table.entityName}VO ${table.entityNameLow}VO, Query query);
}
