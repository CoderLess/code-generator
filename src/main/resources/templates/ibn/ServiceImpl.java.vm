package ${sysConfig.basepackage}.${velocityConfig.template.serviceImpl.outPutPackage};

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.google.common.collect.Lists;
import ${sysConfig.basepackage}.${velocityConfig.template.dao.outPutPackage}.${table.entityName}Dao;
import ${sysConfig.basepackage}.${velocityConfig.template.dto.outPutPackage}.${table.entityName}DTO;
import ${sysConfig.basepackage}.${velocityConfig.template.do.outPutPackage}.${table.entityName}DO;
import ${sysConfig.basepackage}.enumer.ExceptionEnum;
import ${sysConfig.basepackage}.exception.IbnException;
import ${sysConfig.basepackage}.page.PageInfo;
import ${sysConfig.basepackage}.${velocityConfig.template.service.outPutPackage}.${table.entityName}Service;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * @version 1.0
 * @description:
 * @projectName：ibn-rms
 * @see: com.ibn.rms.service.impl
 * @author： RenBin
 * @createTime：2020/8/10 10:01
 */
@Service("${table.entityNameLow}Service")
public class ${table.entityName}ServiceImpl implements ${table.entityName}Service {
    @Autowired
    private ${table.entityName}Dao ${table.entityNameLow}Dao;

    @Override
    public long save(${table.entityName}DTO ${table.entityNameLow}DTO) throws IbnException {
        if (null == ${table.entityNameLow}DTO) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        return ${table.entityNameLow}Dao.save(${table.entityNameLow}DO);
    }

    @Override
    public long saveBatch(List<${table.entityName}DTO> ${table.entityNameLow}DTOList) throws IbnException {
        if (CollectionUtils.isEmpty(${table.entityNameLow}DTOList)) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        List<${table.entityName}DO> ${table.entityNameLow}DOList = ${table.entityNameLow}DTOList.stream().map(${table.entityNameLow}DTO -> {
            ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
            BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
            return ${table.entityNameLow}DO;
        }).collect(Collectors.toList());
        return ${table.entityNameLow}Dao.saveBatch(${table.entityNameLow}DOList);
    }

    @Override
    public int remove(Long id) throws IbnException {
        if (null == id) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        return ${table.entityNameLow}Dao.remove(id);
    }

    @Override
    public int removeBatch(Set<Long> idSet) throws IbnException {
        if (CollectionUtils.isEmpty(idSet)) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        return ${table.entityNameLow}Dao.removeBatch(idSet);
    }

    @Override
    public int modify(${table.entityName}DTO ${table.entityNameLow}DTO) throws IbnException {
        if (null == ${table.entityNameLow}DTO || null == ${table.entityNameLow}DTO.getId()) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        return ${table.entityNameLow}Dao.modify(${table.entityNameLow}DO);
    }

    @Override
    public ${table.entityName}DTO query(Long id) throws IbnException {
        if (null == id) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        ${table.entityName}DO ${table.entityNameLow}ResultDO = ${table.entityNameLow}Dao.query(id);
        if (null == ${table.entityNameLow}ResultDO) {
            return null;
        }
        ${table.entityName}DTO ${table.entityNameLow}DTO = new ${table.entityName}DTO();
        BeanUtils.copyProperties(${table.entityNameLow}ResultDO, ${table.entityNameLow}DTO);
        return ${table.entityNameLow}DTO;
    }

    @Override
    public List<${table.entityName}DTO> queryList(${table.entityName}DTO ${table.entityNameLow}DTO) throws IbnException {
        if (null == ${table.entityNameLow}DTO) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        List<${table.entityName}DO> ${table.entityNameLow}DOList = ${table.entityNameLow}Dao.queryList(${table.entityNameLow}DO);
        if (CollectionUtils.isEmpty(${table.entityNameLow}DOList)) {
            return Lists.newArrayList();
        }
        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = ${table.entityNameLow}DOList.stream().map(cur${table.entityName}DO -> {
            ${table.entityName}DTO cur${table.entityName}DTO = new ${table.entityName}DTO();
            BeanUtils.copyProperties(cur${table.entityName}DO, cur${table.entityName}DTO);
            return cur${table.entityName}DTO;
        }).collect(Collectors.toList());
        return ${table.entityNameLow}DTOList;
    }

    @Override
    public Page<${table.entityName}DTO> queryPage(${table.entityName}DTO ${table.entityNameLow}DTO, PageInfo pageInfo) throws IbnException {
        if (null == pageInfo || null == ${table.entityNameLow}DTO) {
            throw new IbnException(ExceptionEnum.NUll_PARAM);
        }
        PageHelper.startPage(pageInfo.getPageNum(), pageInfo.getPageSize());
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        Page<${table.entityName}DO> ${table.entityNameLow}DOPage = ${table.entityNameLow}Dao.queryPage(${table.entityNameLow}DO);
        if (CollectionUtils.isEmpty(${table.entityNameLow}DOPage)) {
            return new Page<>();
        }
        Page<${table.entityName}DTO> ${table.entityNameLow}DTOPage = new Page<>(${table.entityNameLow}DOPage.getPageNum(),${table.entityNameLow}DOPage.getPageSize());
        ${table.entityNameLow}DTOPage.setTotal(${table.entityNameLow}DTOPage.getTotal());
        ${table.entityNameLow}DOPage.stream().forEach(cur${table.entityName}DO -> {
            ${table.entityName}DTO cur${table.entityName}DTO = new ${table.entityName}DTO();
            BeanUtils.copyProperties(cur${table.entityName}DO, cur${table.entityName}DTO);
            ${table.entityNameLow}DTOPage.add(cur${table.entityName}DTO);
        });
        return ${table.entityNameLow}DTOPage;
    }
}
