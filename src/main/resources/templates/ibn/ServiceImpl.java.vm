package ${sysConfig.basepackage}.${velocityConfig.template.serviceImpl.outPutPackage};

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.google.common.collect.Lists;
import com.ibn.page.PageInfo;
import com.ibn.page.Pagination;
import ${sysConfig.basepackage}.${velocityConfig.template.dao.outPutPackage}.${table.entityName}Dao;
import ${sysConfig.basepackage}.${velocityConfig.template.dto.outPutPackage}.${table.entityName}DTO;
import ${sysConfig.basepackage}.${velocityConfig.template.do.outPutPackage}.${table.entityName}DO;
import ${sysConfig.basepackage}.${velocityConfig.template.service.outPutPackage}.${table.entityName}Service;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * @version 1.0
 * @description: ${table.remark} service实现
 * @projectName：${projectName}
 * @see: ${sysConfig.basepackage}.${velocityConfig.template.serviceImpl.outPutPackage}
 * @author： ${author}
 * @createTime：${curTime}
 */
@Service("${table.entityNameLow}Service")
public class ${table.entityName}ServiceImpl implements ${table.entityName}Service {
    @Autowired
    private ${table.entityName}Dao ${table.entityNameLow}Dao;

    @Override
    public long save(${table.entityName}DTO ${table.entityNameLow}DTO) {
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        ${table.entityNameLow}Dao.save(${table.entityNameLow}DO);
        return ${table.entityNameLow}DO.getId();
    }

    @Override
    public long saveBatch(List<${table.entityName}DTO> ${table.entityNameLow}DTOList) {
        List<${table.entityName}DO> ${table.entityNameLow}DOList = ${table.entityNameLow}DTOList.stream().map(${table.entityNameLow}DTO -> {
            ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
            BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
            return ${table.entityNameLow}DO;
        }).collect(Collectors.toList());
        return ${table.entityNameLow}Dao.saveBatch(${table.entityNameLow}DOList);
    }

    @Override
    public int remove(Long id) {
        return ${table.entityNameLow}Dao.remove(id);
    }

    @Override
    public int removeBatch(Set<Long> idSet) {
        return ${table.entityNameLow}Dao.removeBatch(idSet);
    }

    @Override
    public int modify(${table.entityName}DTO ${table.entityNameLow}DTO) {
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        return ${table.entityNameLow}Dao.modify(${table.entityNameLow}DO);
    }

    @Override
    public ${table.entityName}DTO query(Long id) {
        ${table.entityName}DO ${table.entityNameLow}ResultDO = ${table.entityNameLow}Dao.query(id);
        if (null == ${table.entityNameLow}ResultDO) {
            return null;
        }
        ${table.entityName}DTO ${table.entityNameLow}DTO = new ${table.entityName}DTO();
        BeanUtils.copyProperties(${table.entityNameLow}ResultDO, ${table.entityNameLow}DTO);
        return ${table.entityNameLow}DTO;
    }

    @Override
    public List<${table.entityName}DTO> queryList(${table.entityName}DTO ${table.entityNameLow}DTO) {
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        List<${table.entityName}DO> ${table.entityNameLow}DOList = ${table.entityNameLow}Dao.queryList(${table.entityNameLow}DO);
        if (CollectionUtils.isEmpty(${table.entityNameLow}DOList)) {
            return Lists.newArrayList();
        }
        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = ${table.entityNameLow}DOList.stream().map(cur${table.entityName}DO -> {
            ${table.entityName}DTO cur${table.entityName}DTO = new ${table.entityName}DTO();
            BeanUtils.copyProperties(cur${table.entityName}DO, cur${table.entityName}DTO);
            return cur${table.entityName}DTO;
        }).collect(Collectors.toList());
        return ${table.entityNameLow}DTOList;
    }

    @Override
    public Pagination<${table.entityName}DTO> queryPage(${table.entityName}DTO ${table.entityNameLow}DTO, PageInfo pageInfo) {
        PageHelper.startPage(pageInfo.getPageNum(), pageInfo.getPageSize());
        ${table.entityName}DO ${table.entityNameLow}DO = new ${table.entityName}DO();
        BeanUtils.copyProperties(${table.entityNameLow}DTO, ${table.entityNameLow}DO);
        Page<${table.entityName}DO> ${table.entityNameLow}DOPage = ${table.entityNameLow}Dao.queryPage(${table.entityNameLow}DO);
        if (CollectionUtils.isEmpty(${table.entityNameLow}DOPage)) {
            return new Pagination<>(0,0,0,0);
        }
        Pagination<${table.entityName}DTO> ${table.entityNameLow}DTOPagination = new Pagination<>(${table.entityNameLow}DOPage.getPageNum(),
                ${table.entityNameLow}DOPage.getPageSize(),${table.entityNameLow}DOPage.getTotal(),${table.entityNameLow}DOPage.getPages());

        List<${table.entityName}DTO> ${table.entityNameLow}DTOList = ${table.entityNameLow}DOPage.stream().map(cur${table.entityName}DO -> {
            ${table.entityName}DTO cur${table.entityName}DTO = new ${table.entityName}DTO();
            BeanUtils.copyProperties(cur${table.entityName}DO, cur${table.entityName}DTO);
            return cur${table.entityName}DTO;
        }).collect(Collectors.toList());
        ${table.entityNameLow}DTOPagination.setList(${table.entityNameLow}DTOList);
        return ${table.entityNameLow}DTOPagination;
    }
}
